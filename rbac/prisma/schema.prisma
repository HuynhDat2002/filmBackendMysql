// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//---------------RBAC--------------------------

model Grant {
  id         String    @id @default(uuid())
  resourceId String
  resource   Resource  @relation(fields: [resourceId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  actions    GrantOnAction[]
  attributes String    @default("*")
  role       RoleRBAC  @relation(fields: [roleId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  roleId     String 
  @@unique([resourceId, roleId])
}
model RoleRBAC {
  id              String  @id @default(uuid())
  rol_name        String  @default("USER") @unique
  rol_slug        String  @default("")
  rol_status      Status  @default(ACTIVE)
  rol_description String? @db.Text
  rol_grants      Grant[]
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}
model Resource {
  id              String   @id @default(uuid())
  src_name        String    @unique
  src_slug        String   @db.Text
  src_description String? @db.Text
  grant           Grant[]
  createdAt       DateTime @default(now())
}
model GrantOnAction {
  grant   Grant  @relation(fields: [grantId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  grantId String 

  action  Action @relation(fields: [actionId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  actionId String
  @@id([grantId,actionId])
}
model Action {
  id      String @id @default(uuid())
  action  String @unique
  grant   GrantOnAction  []
}
