// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// //----------------USER-------------------
// model User {
//   id               String             @id @default(uuid()) @db.VarChar(36)
//   name             String
//   email            String             @unique
//   password         String
//   role             Role               @default(USER)
//   status           AccountStatus      @default(Active)
//   createdAt        DateTime           @default(now())
//   updatedAt        DateTime           @updatedAt
//   keyToken         KeyTokens?
//   refreshTokenUsed RefreshTokenUsed[]
//   userAgent        UserOnAgent[]
//   // otp              OTP?
// }

// enum Role {
//   USER
//   ADMIN
// }

// enum AccountStatus {
//   Active
//   Inactive
// }

// model UserOnAgent {
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   userId    String    @db.VarChar(36)
//   userAgent UserAgent @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   agentId   String    @db.VarChar(36)

//   @@id([userId, agentId])
// }

// model UserAgent {
//   id    String        @id @default(uuid()) @db.VarChar(36)
//   agent String        @unique
//   user  UserOnAgent[]
// }

// // -----------------------KEY TOKEN------------------------

// model KeyTokens {
//   id           String   @id @default(uuid()) @db.VarChar(36)
//   userId       String   @unique
//   privateKey   String   @db.Text
//   publicKey    String   @db.Text
//   refreshToken String   @db.Text
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])
// }

// model RefreshTokenUsed {
//   id           String   @id @default(uuid()) @db.VarChar(36)
//   refreshToken String
//   userId       String
//   user         User     @relation(fields: [userId], references: [id])
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   @@index([userId], map: "RefreshTokenUsed_userId_fkey")
// }

// //--------------------OTP-------------------------------

// model OTP {
//   id        String   @id @default(uuid()) @db.VarChar(36)
//   email     String   @unique
//   otp       String   @unique
//   expiresAt DateTime
//   verified  Boolean  @default(false)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // user User @relation(fields: [email], references: [email])
// }

//---------------RBAC--------------------------

model Grant {
  id         String    @id @default(uuid())
  resourceId String
  resource   Resource  @relation(fields: [resourceId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  actions    GrantOnAction[]
  attributes String    @default("*")
  role       RoleRBAC  @relation(fields: [roleId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  roleId     String 
  @@unique([resourceId, roleId])
}
model RoleRBAC {
  id              String  @id @default(uuid())
  rol_name        String  @default("USER") @unique
  rol_slug        String  @default("")
  rol_status      Status  @default(ACTIVE)
  rol_description String? @db.Text
  rol_grants      Grant[]
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}
model Resource {
  id              String   @id @default(uuid())
  src_name        String    @unique
  src_slug        String   @db.Text
  src_description String? @db.Text
  grant           Grant[]
  createdAt       DateTime @default(now())
}
model GrantOnAction {
  grant   Grant  @relation(fields: [grantId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  grantId String 

  action  Action @relation(fields: [actionId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  actionId String
  @@id([grantId,actionId])
}
model Action {
  id      String @id @default(uuid())
  action  String @unique
  grant   GrantOnAction  []
}
