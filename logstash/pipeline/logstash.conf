 # file {
  #   path => "/var/log/nginx/error.log"
  #   start_position => "beginning"
  #   sincedb_path => "/dev/null"
  #   type => "error2"
  # }

input {
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "access"
  }

  file {
    path => "/var/log/nginx/modsec_audit.log"
    start_position => "end"
    sincedb_path => "/dev/null"
    type => "error"
     codec => multiline {
      pattern => "^ModSecurity"
      negate => true
      what => "previous"
    }
  }
}

filter {
  if [type] == "access"  {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
      tag_on_failure => ["_grokparsefailure_access"]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      timezone => "Asia/Ho_Chi_Minh"
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }      
    
    if [response] {

     translate {
      field => "response"
      destination => "response_code_meaning"
      dictionary_path => "/usr/share/logstash/csv/http-status.csv"
      fallback => "Unknown"
      }
    }

  }

  else if [type] == "error" {
    grok {
      match => { 
       
        "message" => [
  "--%{DATA:transaction_id}---A--.*?\n.*?\n%{GREEDYDATA:full_log}",
  "ModSecurity: %{WORD:modsec_action}\\. %{GREEDYDATA:modsec_message} \\[file \"%{GREEDYDATA:modsec_file}\"\\] \\[line \"%{INT:modsec_line}\"\\] \\[id \"%{INT:modsec_id}\"\\] \\[msg \"%{GREEDYDATA:modsec_msg}\"\\] \\[data \"%{GREEDYDATA:modsec_data}\"\\] \\[severity \"%{WORD:modsec_severity}\"\\] \\[tag \"%{GREEDYDATA:modsec_tags}\"\\]",
  "Access denied with code %{NUMBER:status_code} \\(%{GREEDYDATA:phase}\\)"
]
      }
      tag_on_failure => ["modesec_error"]
    }
    if "ModSecurity" in [message] {
      ruby {
        code => "
          begin
            require 'time'

            # Lấy thời gian hiện tại
            current_time = Time.now

            # Lấy giá trị @timestamp từ event
            log_time = event.get('@timestamp')

            if log_time
              # Chuyển @timestamp thành kiểu Time
              log_time = Time.parse(log_time.to_s)

              # Kiểm tra thời gian chênh lệch
              if (current_time - log_time).abs <= 10 # Chỉ log trong vòng 10 giây
                event.tag('shouldmail')
              else
                event.remove_tag('shouldmail') # Loại bỏ tag nếu không thoả mãn
              end
            else
              # Debug nếu thiếu @timestamp
              event.tag('_timestamp_missing')
            end
          rescue => e
            # Gắn tag lỗi nếu xảy ra exception
            event.tag('_rubyexception')
            event.set('ruby_error_message', e.message)
          end
        "
      }
    }
    date {
      match => ["timestamp" , "yyyy/MM/dd HH:mm:ss"]
      timezone => "Asia/Ho_Chi_Minh"
      target => "@timestamp"
      remove_field => [ "timestamp" ]
    }
  }

  # else if [type] == "error2" {
  #   grok {
  #     match => { 
  #        match => { 
  #          "message" => [
  #         "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:loglevel}\] %{POSINT:pid}#%{POSINT:tid}: \*%{POSINT}: %{GREEDYDATA:error_message}"
  #       ]
      
  #     }
  #     }
  #   }
  #   # if [log_content] {
  #   #   grok {
  #   #     match => {
  #   #       "log_content" => [
  #   #         "%{WORD:http_method} %{URI:url} HTTP/%{NUMBER:http_version}",
  #   #         "%{WORD:loglevel} %{GREEDYDATA:error_message}"
  #   #       ]
  #   #     }
  #   #     tag_on_failure => ["modsec_error"]
  #   #   }
  #   # }
  #   date {
  #     match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss" ]
  #     timezone => "Asia/Ho_Chi_Minh"
  #     target => "@timestamp"
  #     remove_field => [ "timestamp" ]
  #   }
  # }

  # if "_grokparsefailure" in [tags] {
  #   mutate {
  #     add_tag => ["_grokparsefailure"]
  #   }
  # }
   # Thêm tag shouldmail cho lỗi từ modsec
  # if [type] == "modsecerror" {
  #   mutate {
  #       add_tag => ["shouldmail"]
  #   }
  # }
}

output {

  if [type] == "access" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "nginx-access-%{+YYYY.MM.dd}"
    }
  }

  else if [type] == "error" {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "nginx-error-%{+YYYY.MM.dd}"
    }
  }
  if "shouldmail" in [tags]{
      stdout {}
      email {
        to => 'hltdat2002@gmail.com'
        from => 'logstash@gmail.com'
        subject => 'Alert - Access Forbiden'
        via => "smtp"
        address => "smtp.gmail.com"
        body => "\\Tags: %{tags}\n\n \\Content: %{message}\n\n \\Timestamp: %{@timestamp}"
        port => 587
        username => "hltdat2002@gmail.com"
        password => "vhmnkbqjysveqljw"
        use_tls => true
      }
  }
  stdout { codec => rubydebug }
}