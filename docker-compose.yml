version: '3.8'
services:

  
  db-mysql:
    image: mysql:8
    container_name: mysql-server
    restart: always
    volumes:
      - my-db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: trongdat1335
    ports:
      - 3308:3306
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-network

  redis-film:
    image: redis:latest
    container_name: redis-film
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - redis:/data
    networks:
      - backend-network

  rabbitmq-film:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '5672:5672'
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: trongdat
      RABBITMQ_DEFAULT_PASS: abc123456
    networks:
      - backend-network
    
  rbac:
    build:
      context: ./rbac
      dockerfile: Dockerfile
    restart: always
    image: tdat/rbac:1.0.0
    deploy:
      replicas: 3
    environment:
      - DB_PORT=3306
      - DB_HOST=db-mysql
      - DB_USER=root
      - DB_PASSWORD=trongdat1335
      - DB_NAME=rbacdb
      - DATABASE_URL=mysql://root:trongdat1335@db-mysql:3306/rbacdb
      - REDIS_HOST=redis-film
      - REDIS_PORT=6379
    depends_on:
      - db-mysql
      - redis-film
    volumes:
      - .:/app
      - /app/rbac/node_modules
    env_file:
      - ./rbac/.env
    expose:
      - 5004
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-network

  film:
    build:
      context: ./film
      dockerfile: Dockerfile
    restart: always
    deploy:
      replicas: 3
    image: tdat/film:1.0.0
    environment:
      - DB_PORT=3306
      - DB_HOST=db-mysql
      - DB_USER=root
      - DB_PASSWORD=trongdat1335
      - DB_NAME=filmdb
      - DATABASE_URL=mysql://root:trongdat1335@db-mysql:3306/filmdb
      - REDIS_HOST=redis-film
      - REDIS_PORT=6379
    depends_on:
      - db-mysql
      - redis-film
    volumes:
      - .:/app
      - /app/film/node_modules
    env_file:
      - ./film/.env
    expose:
      - 5003
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-network

  


  user:
    build:
      context: ./user
      dockerfile: Dockerfile
    restart: always
    image: tdat/user:1.0.0
    deploy:
      replicas: 3
    environment:
      - DB_PORT=3306
      - DB_HOST=db-mysql
      - DB_USER=root
      - DB_PASSWORD=trongdat1335
      - DB_NAME=userdb
      - DATABASE_URL=mysql://root:trongdat1335@db-mysql:3306/userdb
      - REDIS_HOST=redis-film
      - REDIS_PORT=6379
    depends_on:
      - db-mysql
      - redis-film
    volumes:
      - .:/app
      - /app/user/node_modules
    env_file:
      - ./user/.env
    expose:
      - 5000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-network





  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    # container_name: admin
    restart: always
    image: tdat/admin:1.0.0
    deploy:
      replicas: 3
    environment:
      - DB_PORT=3306
      - DB_HOST=db-mysql
      - DB_USER=root
      - DB_PASSWORD=trongdat1335
      - DB_NAME=admindb
      - DATABASE_URL=mysql://root:trongdat1335@db-mysql:3306/admindb
      - REDIS_HOST=redis-film
      - REDIS_PORT=6379
    depends_on:
      - db-mysql
      - rabbitmq-film
      - redis-film
      # - "redis"
    volumes:
      - .:/app/
      - /app/admin/node_modules
    env_file:
      - ./admin/.env
    expose:
      - 5002
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - backend-network

  nextjs:
    # container_name: nextjs-frontend
    build: 
      context: ./filmFrontendUser
      dockerfile: Dockerfile
    image: tdat/nextjs:1.0.0
    restart: always
    expose:
      - 3000
    deploy:
      replicas: 3
    networks:
      - backend-network

  nextjs-admin:
    # container_name: nextjs-frontend
    build: 
      context: ./filmFrontendAdmin
      dockerfile: Dockerfile
    # image: tdat/nextjs:1.0.0
    restart: always
    expose:
      - 3001
    deploy:
      replicas: 3
    networks:
      - backend-network

  # duckdns:
  #   image: lscr.io/linuxserver/duckdns:latest
  #   container_name: duckdns
  #   network_mode: host
  #   restart: always
  #   environment:
  #     - TZ=Asia/Ho_Chi_Minh
  #     - SUBDOMAINS=navyfilm.duckdns.org
  #     - TOKEN=678d7a2e-db77-4e18-8933-1648dd12a342
  #     - UPDATE_IP=192.168.1.7
  #     - LOG_FILE=true

  # certbot:
  #   image: certbot/certbot:latest
  #   container_name: certbot
  #   volumes:
  #     - ./certbot/www/:/var/www/certbot/:rw
  #     - ./certbot/conf/:/etc/letsencrypt/:rwv
  #   command: certonly --standalone -w /var/www/certbot  --force-renewal --email hltdat2002@gmail.com -d navyfilm.xyz --agree-tos
      

  nginx-proxy:
    # image: tdat/nginx:1.0.0 # owasp/modsecurity-crs:nginx #reverse-proxy # owasp/modsecurity-crs:nginx 
    container_name: nginx-backend
    build:
      dockerfile: Dockerfile
      context: ./proxy
    depends_on:
      - film
      - user
      - admin
      - rbac  
      - nextjs
      - nextjs-admin
      # - certbot
    ports:
      - 443:443
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - /var/log/nginx:/var/log/nginx
      - /etc/ssl/certs:/etc/nginx/ssl
      - ./proxy/modsecurity.conf:/etc/modsecurity/modsecurity.conf
      - ./proxy/coreruleset:/etc/modsecurity.d/owasp-crs
      - ./proxy/crs-setup.conf:/etc/nginx/owasp-modsecurity-crs-3.0.2/crs-setup.conf
      - ./proxy/.htpasswd:/etc/nginx/.htpasswd
      - ./proxy/cert/selfsigned.crt:/etc/ssl/certs/selfsigned.crt
      - ./proxy/cert/selfsigned.key:/etc/ssl/certs/selfsigned.key
      # - ./certbot/www/:/var/www/certbot/:ro
    networks:
      - backend-network


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch-digitic
    restart: always
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - backend-network




  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.2
    container_name: logstash
    restart: always
    environment:
      - TZ=Asia/Ho_Chi_Minh  # Đặt múi giờ của hệ thống
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - /var/log/nginx:/var/log/nginx:rw
      - ./logstash/csv:/usr/share/logstash/csv
    depends_on:
      - elasticsearch
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - backend-network



  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - backend-network



networks:
  backend-network:
    driver: bridge  

volumes:
  esdata:
    driver: local
  my-db:
    external: true
  redis:
    driver: local

