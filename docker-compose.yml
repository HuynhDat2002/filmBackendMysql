version: '3.8'
services:
  
  film-dev:
    build:
      context: ./film
      dockerfile: Dockerfile
      target: dev
    image: tdat/film:dev
    container_name: film-dev

  film-prod:
    build:
      context: ./film
      dockerfile: Dockerfile
      target: prod
    image: tdat/film:prod
    container_name: film-prod
    

  admin-dev:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: dev
    image: tdat/admin:dev
    container_name: admin-dev
  admin-prod:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: prod
    image: tdat/admin:prod
    container_name: admin-prod
   
  user-dev:
    build:
      context: ./user
      dockerfile: Dockerfile
      target: dev
    image: tdat/user:dev
    container_name: user-dev
   

  user-prod:
    build:
      context: ./user
      dockerfile: Dockerfile
      target: prod
    image: tdat/user:prod
    container_name: user-prod

  rbac-dev:
    build:
      context: ./rbac
      dockerfile: Dockerfile
      target: dev
    image: tdat/rbac:dev
    container_name: rbac-dev
  rbac-prod:
    build:
      context: ./rbac
      dockerfile: Dockerfile
      target: prod
    image: tdat/rbac:prod
    container_name: rbac-prod
 
  nextjs-dev:
    container_name: nextjs-dev
    build: 
      context: ./filmFrontendUser
      dockerfile: Dockerfile
      target: dev
    image: tdat/nextjs:dev
    

  nextjs-prod:
    container_name: nextjs-prod
    build: 
      context: ./filmFrontendUser
      dockerfile: Dockerfile
      target: prod
    image: tdat/nextjs:prod
    

  nextjs-admin-dev:
    container_name: nextjs-admin-dev
    build: 
      context: ./filmFrontendAdmin
      dockerfile: Dockerfile
      target: dev
    image: tdat/nextjs-admin:dev

  nextjs-admin-prod:
    container_name: nextjs-admin-prod
    build: 
      context: ./filmFrontendAdmin
      dockerfile: Dockerfile
      target: prod
    image: tdat/nextjs-admin:prod



  nginx-proxy:
    container_name: nginx-backend
    build:
      dockerfile: Dockerfile
      context: ./proxy
    image: tdat/nginx:latest # owasp/modsecurity-crs:nginx #reverse-proxy # owasp/modsecurity-crs:nginx 
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - /var/log/nginx:/var/log/nginx
      - /etc/ssl/certs:/etc/nginx/ssl
      - ./proxy/modsecurity.conf:/etc/modsecurity/modsecurity.conf
      - ./proxy/coreruleset:/etc/modsecurity.d/owasp-crs
      - ./proxy/crs-setup.conf:/etc/nginx/owasp-modsecurity-crs-3.0.2/crs-setup.conf
      - ./proxy/.htpasswd:/etc/nginx/.htpasswd
      - ./proxy/cert/selfsigned.crt:/etc/ssl/certs/selfsigned.crt
      - ./proxy/cert/selfsigned.key:/etc/ssl/certs/selfsigned.key
      # - ./certbot/www/:/var/www/certbot/:ro
  # waf:
  #   image: owasp/modsecurity-crs:nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./proxy/nginx.conf:/etc/nginx/nginx.conf.template
  #     - ./proxy/modsecurity.conf:/etc/modsecurity.d/modsecurity.conf
  #     - ./proxy/modsecurity.d:/etc/modsecurity.d/owasp-crs
  #     - ./cert:/etc/ssl/certs
  #     - ./proxy/.htpasswd:/etc/nginx/.htpasswd
  #   networks:
  #     - backend-network

  



networks:
  backend-network:
    driver: bridge  

volumes:
  esdata:
    driver: local
  # mysql-film:
  #   external: true
  # mysql-admin:
  #   external: true
  # mysql-user:
  #   external: true
  # mysql-rbac:
  #   external: true
  redis:
    driver: local

